#!/usr/bin/python
"""
Utility to quickly visualize spectra.

It works in three different modes:

a) it generates a stack of sub-plots, one for each spectrum (default mode)
   Example:
   plot-spectra.py flux.norm.nulbad measured.fits

b) it generates one single plot with all spectra overlapped ("--ovl" option)
   Example:
   > plot-spectra.py --ovl flux.norm.nulbad measured.fits

c) it creates a PDF file with a small wavelength interval per page ("--pieces"
   option). This is useful to flick through a large wavelength range.
   Example:
   > plot-spectra.py --pieces --aint 7 flux.norm.nulbad measured.fits
"""
import argparse
from pyfant import *
import matplotlib.pyplot as plt
import traceback
import logging

logging.basicConfig(level=logging.INFO)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
     description=__doc__,
     formatter_class=SmartFormatter
    )

    parser.add_argument('fn', type=str, nargs='+',
     help='name of spertrum file (either generated by pfant or nulbad)')
    parser.add_argument('--ovl', help='Overlapped graphics', action="store_true")
    parser.add_argument('--pieces', help='If set, will generate a PDF file instead,'
     'and each page of the PDF will contain one "piece" of the spectra of length'
     'given by the --aint option. --ovl is ignored', action="store_true")
    parser.add_argument('--aint', type=int, nargs='?', default=50,
     help='length of each piece-plot in wavelength units (used only if --pieces)')
    parser.add_argument('--fn_output', nargs='?', default='pieces.pdf', type=str,
     help='PDF output file name (used only if --pieces)')

    args = parser.parse_args()


    classes = [FileSpectrumPfant, FileSpectrumNulbad, FileSpectrumXY, FileSpectrumFits]

    ss = []
    flag_ok = False
    for x in args.fn:
        print "Trying to read file '%s'..." % x
        f = load_with_classes(x, classes)
        if f is None:
            print_error("... not recognized, sorry")
        else:
            print "... successfully read using reader %s." % f.__class__.__name__
            ss.append(f.spectrum)

    if len(ss) == 0:
        print_error("Nothing to plot!")
    else:
        if args.pieces:
            plot_spectra_pieces_pdf(ss, aint=args.aint, pdf_filename=args.fn_output)
        else:
            if args.ovl:
                f = plot_spectra_overlapped
            else:
                f = plot_spectra
            f(ss, "")
            plt.show()
