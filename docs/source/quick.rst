Quickstart
==========

Command-line operation
----------------------

**Aims for this tutorial:**

-  calculate a synthetic spectrum;
-  convolve with Gaussian functions of varying
   full-width-at-half-maximum (FWHM);
-  visualize results.

Short story
~~~~~~~~~~~

Here is the full command sequence:

.. code:: shell

    mkdir mystar
    cd mystar
    copy-star.py
    link.py
    run4.py
    plot-spectra.py --ovl flux.norm flux.norm.nulbad.0.120

.. note:: If you choose star "Mu-Leo", run ``run4.py --allow true`` to bypass the fact that its
          metallicity if outside the atmospheric model grid provided

Long story
~~~~~~~~~~

Create a new directory
^^^^^^^^^^^^^^^^^^^^^^

.. code:: shell

    mkdir mystar
    cd mystar

Gather input data
^^^^^^^^^^^^^^^^^

Input data consists of:

#. stellar parameters (temperature, chemical abundances etc.) and
   running settings
    (*e.g.*, calculation wavelength interval);
#. star-independent physical data: line lists, atmospheric model grid,
   partition
    functions etc. that are less likely to be modified.
    We refer to these as "common" data.

Stellar data and running settings
'''''''''''''''''''''''''''''''''

The following displays a menu allowing you to choose among a few stars:

.. code:: shell

    copy-star.py

After running this, the following files will be copied into the *mystar*
directory:

-  *main.dat*: main configuration (editable with ``mained.py``,
   ``x.py``)
-  *abonds.dat*: chemical abundances (editable with ``abed.py``,
   ``x.py``)

Common data
'''''''''''

| For these data, we will create links instead of copying the files, as
the files are big
| and/or unlikely to change:

.. code:: shell

    link.py

The following links that should appear in your directory now:

-  *absoru2.dat*
-  *atoms.dat*
-  *grid.moo*
-  *hmap.dat*
-  *molecules.dat*
-  *partit.dat*

Spectral synthesis pipeline
^^^^^^^^^^^^^^^^^^^^^^^^^^^

| Spectral synthesis involves a few steps,
| as shown Figure 2,
| and described in the next subsections.

::

    +-------------------+   +----------------+   +-----------+   +----------+
    | innewmarcs        |   | hydro2         |   | pfant     |   | nulbad   |
    | ==========        |   | ======         |   | =====     |   | ======   |
    |   interpolate the |   |         create |   | calculate |   | convolve |
    |       atmospheric |-->| hydrogen lines |-->| synthetic |-->|     with |
    |             model |   |       profiles |   |  spectrum |   | Gaussian |
    +-------------------+   +----------------+   +-----------+   +----------+

Figure 2 - PFANT spectral synthesis pipeline showing the Fortran
program names and what they do.

Interpolate the stellar atmospheric model
'''''''''''''''''''''''''''''''''''''''''

This step takes a 3D grid of atmospheric models (usually a file named
*grid.mod*) and interpolates a new model given a certain point (temperature, gravity, metallicity)
(specified in the main configuration file) contained within the limits of the grid.

.. code:: shell

    innewmarcs

will create two files: *modeles.mod* and *modeles.opa*.

.. note:: If the combination of (temperature, gravity, metallicity) is outside the limits of the
          grid, ``innewmarcs`` will refuse to interpolate. However, it can be forced to use the
          nearest points in the grid with command-line option ``--allow T``.

Create hydrogen lines profiles
''''''''''''''''''''''''''''''

.. code:: shell

    hydro2

will create files such as: *thalpha* (Figure 8), *thbeta*, *thgamma*
etc.

Calculate synthetic spectrum
''''''''''''''''''''''''''''

.. code:: shell

    pfant

creates files *flux.norm*, *flux.spec*, *flux.cont*, respectively: normalized, un-normalized,
continuum spectrum.

To visualize these files:

.. code:: shell

    plot-spectra.py flux.spec flux.cont flux.norm

will open a plot window (Figure 3).

|image0|

Figure 3 -- plots of three files generated by ``pfant``.

Convolve synthetic spectrum with Gaussian function
''''''''''''''''''''''''''''''''''''''''''''''''''

| The following will take the normalized spectrum from the previous step
and convolve it
| with a Gaussian function of FWHM=0.12 :

.. code:: shell

    nulbad

creates file *flux.norm.nulbad.0.120*

.. note:: You can change the FWHM using option ``--fwhm``

Plot spectra
''''''''''''

.. code:: shell

    plot-spectra.py --ovl flux.norm flux.norm.nulbad.0.120

opens a plot window where one can see how the spectrum looks before and
after the convolution (Figure 4).

|image1|

Figure 4 -- plot comparing spectra without and after convolution with
Gaussian function (FWHM=0.12).

Running the four calculation steps at once
''''''''''''''''''''''''''''''''''''''''''

The script ``run4.py`` is provided for convenience and will run all Fortran binaries in sequence.

.. code:: shell

    run4.py --fwhm 0.12

.. note:: The same command-line options available in the Fortran binaries are available in ``run4.py ``.

Where you can find more information
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* **Description of stellar parameters, running settings,
  command-line options:** run ``x.py``  and navigate through the fields in Tabs 1 and 3.
  As you navigate, a description of the current field will be displayed at the bottom of the window.

* Call a program with "--help" option, *e.g.*, ``pfant --help``.

* TODO **other *README.md* files** can be found in other PFANT subdirectories.

* ``programs.py`` lists all Fortran/Python programs.

* The Fortran source code

* TODO Also check the pyfant tutorial(s) at
http://github.com/trevisanj/pyfant

Graphical interface operation
-----------------------------

Spectral Synthesis from Scratch
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Shell commands:

.. code:: shell

    mkdir mystar
    cd mystar
    copy-star.py
    link.py common
    x.py

The last command will invoke the PFANT Launcher (Figure 5):

#. Change parameters in Tab 1/2/3 (Tab 4 is a different story)
#. Click on the "Submit single job" button: a new window named
   "Runnables Manager" opens
#. When the "Status" column shows "nulbad finished", double-click on the
   table item: "PFANT Explorer" window opens
#. Double-click on "flux.norm": turns green (if wasn't so)
#. Double-click on "Plot spectrum": spectrum appears

|image2|

|image3|

|image4|

|image5|

Figure 5 -- Screenshots of the ``x.py`` application

Edit stellar parameters and abundances
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. TODO:: explain that these files can be edited using mained.py, abed.py or also in x.py

.. TODO:: summarize file types and their editors

Browse files with *F311 Explorer*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: shell

    explorer.py

|image6|

This application allows you to navigate through your file system and
visualize/edit files of various files, including spectra and most files used by PFANT.
A list with all supported file types is
available `here <...>`__

You can select several spectral files and plot them all at once
(stacked in different sub-plots, or overlapped in a single plot).

Edit Atomic Lines file
~~~~~~~~~~~~~~~~~~~~~~

.. TODO:: reduce screenshot sizes

First make a copy of file "atoms.dat" to leave the current one
untouched.

.. code:: shell

    copy atoms.dat atoms2.dat

Now open the Atomic Lines Editor

.. code:: shell

    ated.py atoms2.dat

|image7|

Edit Molecular Lines file
~~~~~~~~~~~~~~~~~~~~~~~~~

First make a copy of file "molecules.dat" to leave the current one
untouched.

.. code:: shell

    copy molecules.dat molecules2.dat

Now open the Molecular Lines Editor

.. code:: shell

    mled.py molecules2.dat

|image8|

List all applications avaiable from the *f311* Python project
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. todo:: nicer table, make programs.py output rst table, add optional column for python package,
          remove rows that do not apply to PFANT

Most of the applications from project *f311* were created to target needs from PFANT users or
people working with spectral synthesis. Here is a list of these applications obtained using
``programs.py`` in 16/Feb/2017:

.. code:: shell


    $ programs.py

    Package 'aosss'
    ===============

      Graphical applications
      ----------------------

        wavelength-chart.py ......... Draws chart showing spectral lines of
                                      interest, spectrograph wavelength ranges, ESO
                                      atmospheric model, etc.

      Command-line tools
      ------------------

        create-simulation-reports.py  Creates HTML reports from WebSim-COMPASS
                                      output files
        create-spectrum-lists.py .... Create several .splist (spectrum list) files
                                      from WebSim-COMPASS output files; groups
                                      spectra that share same wavelength vector
        get-compass.py .............. Downloads WebSim-COMPASS simulations
        list-mosaic-modes.py ........ Lists MOSAIC Spectrograph modes
        organize-directory.py ....... Organizes simulation directory (creates
                                      folders, moves files, creates 'index.html')

    Package 'convmol'
    =================

      Graphical applications
      ----------------------

        convmol.py ........ Conversion of molecular lines data to PFANT format

      Command-line tools
      ------------------

        download-hitran.py  Downloads molecular lines from HITRAN database
        print-nist.py ..... Downloads and prints molecular constants from NIST Web
                            Book for a particular molecule

    Package 'explorer'
    ==================

      Graphical applications
      ----------------------

        abed.py .......... Abundances file editor
        ated.py .......... Atomic lines file editor
        cubeed.py ........ Data Cube Editor, import/export WebSim-COMPASS data cubes
        explorer.py ...... F311 Explorer --  list, visualize, and edit data files
                           (_à la_ File Manager)
        mained.py ........ Main configuration file editor.
        mled.py .......... Molecular lines file editor.
        splisted.py ...... Spectrum List Editor
        tune-zinf.py ..... Tunes the "zinf" parameter for each atomic line in atomic
                           lines file

      Command-line tools
      ------------------

        create-grid.py ... Merges several atmospheric models into a single file
                           (_i.e._, the "grid")
        cut-atoms.py ..... Cuts atomic lines file to wavelength interval specified
        cut-molecules.py . Cuts molecular lines file to wavelength interval
                           specified
        cut-spectrum.py .. Cuts spectrum file to wavelength interval specified
        plot-spectra.py .. Plots spectra on screen or creates PDF file
        vald3-to-atoms.py  Converts VALD3 atomic/molecular lines file to PFANT
                           atomic lines file.

    Package 'pyfant'
    ================

      Graphical applications
      ----------------------

        x.py ........ PFANT Launcher -- Graphical Interface for Spectral Synthesis

      Command-line tools
      ------------------

        copy-star.py  Copies stellar data files (such as main.dat, abonds.dat,
                      dissoc.dat) to local directory
        link.py ..... Creates symbolic links to PFANT data files as an alternative
                      to copying these (sometimes large) files into local directory
        run4.py ..... Runs the four Fortran binaries in sequence: `innewmarcs`,
                      `hydro2`, `pfant`, `nulbad`
        save-pdf.py . Looks for files "*.norm" inside directories session-* and
                      saves one figure per page in a PDF file

    PFANT Fortran binaries
    ======================

        innewmarcs  found
        hydro2 .... found
        pfant ..... found
        nulbad .... found

Writing Python scripts with *pyfant* package
--------------------------------------------

Running innewmarcs, hydro2, pfant, nulbad in sequence & plotting spectra
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: python

    import f311.pyfant as pf
    import f311.explorer as ex
    obj = pf.Combo()
    obj.run()
    obj.load_result()

    # Plots continuum, spectrum, normalized in three sub-plots
    ex.plot_spectra([obj.result["cont"], obj.result["spec"], obj.result["norm"]])

    # Plots normalized unconvolved, normalized convolved spectra overlapped
    ex.plot_spectra_overlapped([obj.result["norm"], obj.result["convolved"]])

|image9|

TODO for more examples, please visit .........


.. |image0| image:: img/spec-cont-norm0.png
.. |image1| image:: img/normfwhm.png
.. |image2| image:: img/x.py-0.png
.. |image3| image:: img/x.py-1.png
.. |image4| image:: img/x.py-2.png
.. |image5| image:: img/x.py-3.png
.. |image6| image:: img/explorer.png
.. |image7| image:: img/ated.png
.. |image8| image:: img/mled.png
.. |image9| image:: img/pyfant-example-00.png
